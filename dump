#!/usr/bin/env ruby

require 'yaml'

begin
  require 'dbus'
rescue LoadError
  $stderr.puts 'ruby-dbus needs to be installed'
  exit 1
end

$ignore = %w[
  /xfce4-keyboard-shortcuts/commands/default
  /xfce4-keyboard-shortcuts/commands/custom/override
  /xfce4-keyboard-shortcuts/xfwm4/default
  /xfce4-keyboard-shortcuts/xfwm4/custom/override
  /xfce4-keyboard-shortcuts/providers
  /xfce4-session/sessions/Failsafe
  /xfce4-desktop/backdrop
  /xfce4-appfinder/actions
  /xfce4-notifyd/applications/known_applications
  /displays
  /xfce4-desktop/last
  /xfce4-appfinder/last
  /xfce4-settings-manager/last
  /xfce4-settings-editor/last
  /xfce4-mime-settings/last
  /thunar/last
]

prefixes = [ '/usr', ENV['HOME'] + '/.local' ]
$prefix = prefixes.find { |e| File.exists?(e + '/share/xfconf-helper/defaults.yml') }
raise "Couldn't find defaults" unless $prefix

$xfconf = DBus.session_bus['org.xfce.Xfconf']['/org/xfce/Xfconf']['org.xfce.Xfconf']
$defaults = YAML.load(File.read($prefix + '/share/xfconf-helper/defaults.yml'))

$data = ARGV[0] ? YAML.load(File.read(ARGV[0])) : {}

$shortcuts = $data['shortcuts'] ||= { 'commands' => {}, 'wm' => {} }
$settings = $data['settings'] ||= {}
$panels = $data['panels'] = []

channels = $xfconf.ListChannels()

channels.each do |channel|
  props = $xfconf.GetAllProperties(channel, '/')
  case channel
  when 'xfce4-keyboard-shortcuts'
    defaults = $defaults['shortcuts']
    props.each do |k, v|
      case k
      when %r{^/commands/custom/(.+)}
        next if $1 == 'override'
        next if defaults['commands'][$1] == v
        $shortcuts['commands'][$1] = v
      when %r{^/xfwm4/custom/(.+)}
        next if $1 == 'override'
        t = v.slice(..-5)
        next if defaults['wm'][t] == $1
        $shortcuts['wm'][t] = $1
      end
    end
  when 'xfce4-panel'
    panels = Hash.new { |h,k| h[k] = Hash.new }
    plugins = Hash.new { |h,k| h[k] = Array.new }
    props.each do |k, v|
      case k
      when %r{^/panels/panel-(\d+)/(.+)$}
        panels[$1.to_i][$2] = v
      when %r{^/plugins/plugin-(\d+)$}
        plugins[$1.to_i][0] = v
      when %r{^/plugins/plugin-(\d+)/(.+)$}
        plugins[$1.to_i][1] ||= Hash.new
        plugins[$1.to_i][1][$2] = v
      end
    end
    panels.each_value do |panel|
      plugin_ids = panel.delete('plugin-ids')
      panel['plugins'] = plugin_ids.map { |id| plugins[id] }
      $panels << panel
    end
  else
    defaults = $defaults['settings'][channel]
    props.reject! { |k, v| defaults[k] == v } if defaults
    props.reject! { |k, v| ('/' + channel + k).start_with?(*$ignore) }
    next if props.empty?
    $settings[channel] ||= {}
    $settings[channel].merge!(props.sort.to_h)
  end
end

puts YAML.dump($data)
